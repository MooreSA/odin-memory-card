{"version":3,"sources":["components/Header.jsx","components/Card.jsx","images.js","components/GameBoard.jsx","components/ScoreBoard.jsx","components/Content.jsx","components/Footer.jsx","App.jsx","index.jsx"],"names":["Header","className","href","Card","props","cardData","handleCardClick","cardId","imgSrc","imgAlt","calc","x","y","window","innerHeight","innerWidth","useSpring","xys","config","mass","tension","friction","spingProps","set","div","onClick","onMouseMove","clientX","clientY","onMouseLeave","style","transform","interpolate","s","data-id","classNames","GameBoard","incrementScore","resetScore","useState","cardArray","i","length","push","clicked","cardsInfo","setCardsInfo","shuffleCards","prevState","array","tempValue","randomIndex","copiedArray","map","item","currentIndex","Math","floor","random","shuffleArray","resetGameBoard","prevCards","card","event","targetId","target","dataset","id","cardClicked","cards","ScoreBoard","score","highScore","Content","setScore","setHighSore","useEffect","Footer","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.550399ea.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = () => (\n  <header className=\"header\">\n    <div className=\"header__info\">\n      <div className=\"header__title\">Memory Card Game</div>\n      <div className=\"header__subtitle\">\n        Get points by Clicking on an Image, but don&apos;t click on any more than once!\n      </div>\n    </div>\n    <a href=\"http://mooresa.github.io\" className=\"header__link\">Home</a>\n  </header>\n);\n\nexport default Header;\n","import React from 'react';\nimport '@fortawesome/fontawesome-free/scss/fontawesome.scss';\nimport '@fortawesome/fontawesome-free/scss/brands.scss';\nimport { useSpring, animated } from 'react-spring';\n\nconst Card = (props) => {\n  // eslint-disable-next-line no-unused-vars\n  const { cardData, handleCardClick } = props;\n  const {\n    // eslint-disable-next-line no-unused-vars\n    imgSrc, imgAlt, cardId, className,\n  } = cardData;\n\n  // Honestly. this is magic\n  const calc = (x, y) => (\n    [-(y - window.innerHeight / 2) / 30, (x - window.innerWidth / 2) / 30, 1.1]\n  );\n  const trans = (x, y, s) => `perspective(600px) rotateX(${x}deg) rotateY(${y}deg) scale(${s})`;\n\n  const [spingProps, set] = useSpring(() => (\n    { xys: [0, 0, 1], config: { mass: 5, tension: 350, friction: 40 } }\n  ));\n\n  return (\n    <animated.div\n      className=\"gameboard__card\"\n      onClick={handleCardClick}\n      onMouseMove={({ clientX: x, clientY: y }) => set({ xys: calc(x, y) })}\n      onMouseLeave={() => set({ xys: [0, 0, 1] })}\n      style={{ transform: spingProps.xys.interpolate(trans) }}\n      data-id={cardId}\n    >\n      <i className={` gameboard__icon ${className}`} data-id={cardId} />\n    </animated.div>\n  );\n};\n\nexport default Card;\n","import '@fortawesome/fontawesome-free/js/fontawesome';\nimport '@fortawesome/fontawesome-free/js/solid';\n\nconst classNames = [\n  'fab fa-amazon fa-7x',\n  'fab fa-airbnb fa-7x',\n  'fab fa-apple fa-7x',\n  'fab fa-chrome fa-7x',\n  'fab fa-facebook-square fa-7x',\n  'fab fa-github fa-7x',\n  'fab fa-linux fa-7x',\n  'fab fa-microsoft fa-7x',\n  'fab fa-node-js fa-7x',\n  'fab fa-react fa-7x',\n  'fab fa-sass fa-7x',\n  'fab fa-python fa-7x',\n];\n\nexport default classNames;\n","import React, { useState } from 'react';\nimport Card from './Card';\nimport classNames from '../images';\n\nconst GameBoard = (props) => {\n  const { incrementScore, resetScore } = props;\n  // there must be a better way of doing this\n  const [cardsInfo, setCardsInfo] = useState(() => {\n    const cardArray = [];\n    for (let i = 0; i < classNames.length; i += 1) {\n      cardArray.push({\n        className: classNames[i],\n        clicked: false,\n        cardId: classNames[i],\n      });\n    }\n    return cardArray;\n  });\n\n  // Fisher-Yates Shuffle Algorithmn\n  const shuffleArray = (array) => {\n    const copiedArray = array.map((item) => item);\n    let currentIndex = array.length;\n    let tempValue;\n    let randomIndex;\n\n    while (currentIndex !== 0) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      tempValue = copiedArray[currentIndex];\n      copiedArray[currentIndex] = copiedArray[randomIndex];\n      copiedArray[randomIndex] = tempValue;\n    }\n\n    return copiedArray;\n  };\n\n  const shuffleCards = () => {\n    setCardsInfo((prevState) => shuffleArray(prevState));\n  };\n\n  // maps the previous state onto itself with just the clicked prop changing\n  const resetCards = () => {\n    // holy fuck this works?\n    setCardsInfo((prevCards) => prevCards.map((card) => ({ ...card, clicked: false })));\n  };\n\n  // resets everything inside this component\n  const resetGameBoard = () => {\n    resetCards();\n    resetScore();\n  };\n\n  // sets the clicked property of the target card to clicked\n  // have to use map as it will return a brand new array\n  const clickCard = (cardId) => {\n    setCardsInfo((cards) => cards.map((card) => {\n      if (card.cardId === cardId) {\n        return { ...card, clicked: true };\n      }\n      return card;\n    }));\n  };\n\n  // checks if the card that matches cardId is clicked\n  const cardClicked = (cardId) => {\n    // console.log(cardId);\n    for (let i = 0; i < cardsInfo.length; i += 1) {\n      if (cardsInfo[i].cardId === cardId) {\n        if (cardsInfo[i].clicked) {\n          return true;\n        }\n        return false;\n      }\n    }\n    return null;\n  };\n\n  // handles the clicked passed up from the card component\n  const handleCardClick = (event) => {\n    const targetId = event.target.dataset.id;\n    if (cardClicked(targetId)) {\n      resetGameBoard();\n      shuffleCards();\n    } else {\n      clickCard(targetId);\n      incrementScore();\n      shuffleCards();\n    }\n  };\n\n  return (\n    <div className=\"gameboard\">\n      {cardsInfo.map((cardData) => (\n        <Card cardData={cardData} handleCardClick={handleCardClick} key={cardData.cardId} />\n      ))}\n    </div>\n  );\n};\n\nexport default GameBoard;\n","import React from 'react';\n\nconst ScoreBoard = (props) => {\n  const { score, highScore } = props;\n\n  return (\n    <div className=\"scoreboard\">\n      <div className=\"scoreboard__current\">\n        Current Score: {score}\n      </div>\n      <div className=\"scoreboard__highscore\">\n        High Score: {highScore}\n      </div>\n    </div>\n  );\n};\n\nexport default ScoreBoard;\n","import React, { useEffect, useState } from 'react';\nimport GameBoard from './GameBoard';\nimport ScoreBoard from './ScoreBoard';\n\nconst Content = () => {\n  const [score, setScore] = useState(0);\n  const [highScore, setHighSore] = useState(0);\n\n  const newHighScore = () => setHighSore(score);\n  const resetScore = () => setScore(0);\n  const incrementScore = () => setScore(score + 1);\n\n  useEffect(() => (score > highScore ? newHighScore() : null), [score]);\n\n  return (\n    <div className=\"content\">\n      <ScoreBoard score={score} highScore={highScore} />\n      <GameBoard resetScore={resetScore} incrementScore={incrementScore} />\n    </div>\n  );\n};\n\nexport default Content;\n","import React from 'react';\n\nconst Footer = () => (\n  <footer className=\"footer\">\n    Copyright © 2021 Seamus Moore\n  </footer>\n);\n\nexport default Footer;\n","import React from 'react';\nimport Header from './components/Header';\nimport Content from './components/Content';\n// import ScoreBoard from './components/ScoreBoard';\n// import GameBoard from './components/GameBoard';\nimport Footer from './components/Footer';\n\nconst App = () => (\n  <div className=\"page\">\n    <Header />\n    <Content />\n    {/* <ScoreBoard score={score} highScore={highScore} />\n      <GameBoard resetScore={resetScore} incrementScore={incrementScore} /> */}\n    <Footer />\n  </div>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './styles/index.scss';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}